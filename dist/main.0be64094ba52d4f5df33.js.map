{"version":3,"file":"main.0be64094ba52d4f5df33.js","mappings":"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","sources":["webpack://imobiliaria/./src/Back-End/back/config/database.js","webpack://imobiliaria/./src/Back-End/back/controllers/ImovelController.js","webpack://imobiliaria/./src/Back-End/back/controllers/authController.js","webpack://imobiliaria/./src/Back-End/back/middleware/authMiddleware.js","webpack://imobiliaria/./src/Back-End/back/models/Imovel.js","webpack://imobiliaria/./src/Back-End/back/models/User.js","webpack://imobiliaria/./src/Back-End/back/passport.js","webpack://imobiliaria/./src/Back-End/back/routes/authRoutes.js","webpack://imobiliaria/./src/Back-End/back/routes/imoveis.js","webpack://imobiliaria/./src/Back-End/back/routes/userRoutes.js","webpack://imobiliaria/./src/index.js","webpack://imobiliaria/external commonjs \"bcrypt\"","webpack://imobiliaria/external commonjs \"body-parser\"","webpack://imobiliaria/external commonjs \"cookie-parser\"","webpack://imobiliaria/external commonjs \"cors\"","webpack://imobiliaria/external commonjs \"express\"","webpack://imobiliaria/external commonjs \"fs\"","webpack://imobiliaria/external commonjs \"jsonwebtoken\"","webpack://imobiliaria/external commonjs \"passport\"","webpack://imobiliaria/external commonjs \"passport-jwt\"","webpack://imobiliaria/external commonjs \"passport-local\"","webpack://imobiliaria/external commonjs \"path-browserify\"","webpack://imobiliaria/external commonjs \"sequelize\""],"sourcesContent":["const { Sequelize } = require('sequelize');\n\nconst sequelize = new Sequelize('imobiliaria', 'postgres', 'admin', {\n  host: 'localhost',\n  dialect: 'postgres',\n});\n\nmodule.exports = sequelize;","//ImovelController.js\n\nconst Imovel = require('../models/Imovel');\n\n// Create (Criar um novo imóvel)\nexports.create = async (req, res) => {\n  try {\n    console.log('Dados recebidos do formulário:', req.body);\n\n    const imovel = await Imovel.create(req.body);\n    res.status(201).json(imovel);\n  } catch (error) {\n    console.error('Erro ao cadastrar imóvel:', error);\n    res.status(500).json({ message: 'Erro ao criar o imóvel' });\n  }\n};\n\n// Read (Listar todos os imóveis)\nexports.list = async (req, res) => {\n  try {\n    const imoveis = await Imovel.findAll();\n    res.status(200).json(imoveis);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Erro ao listar os imóveis' });\n  }\n};\n\n// Read (Obter detalhes de um imóvel específico)\nexports.getById = async (req, res) => {\n  const { id } = req.params;\n  try {\n    const imovel = await Imovel.findByPk(id);\n    if (!imovel) {\n      return res.status(404).json({ message: 'Imóvel não encontrado' });\n    }\n    res.status(200).json(imovel);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Erro ao obter detalhes do imóvel' });\n  }\n};\n\n// Update (Atualizar um imóvel existente)\nexports.update = async (req, res) => {\n  const { id } = req.params;\n  try {\n    const [updated] = await Imovel.update(req.body, {\n      where: { id }\n    });\n    if (!updated) {\n      return res.status(404).json({ message: 'Imóvel não encontrado' });\n    }\n    const imovel = await Imovel.findByPk(id);\n    res.status(200).json(imovel);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Erro ao atualizar o imóvel' });\n  }\n};\n\n// Delete (Excluir um imóvel existente)\nexports.delete = async (req, res) => {\n  const { id } = req.params;\n  try {\n    const deleted = await Imovel.destroy({\n      where: { id }\n    });\n    if (!deleted) {\n      return res.status(404).json({ message: 'Imóvel não encontrado' });\n    }\n    res.status(204).end();\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Erro ao excluir o imóvel' });\n  }\n};\n","//authController.js\n\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User');\n\nasync function registerUser(req, res) {\n    try {\n        const { email, password, username, phone } = req.body;\n\n        const existingUsername = await User.findOne({ where: { username } });\n        if (existingUsername) {\n            return res.status(400).json({ message: 'Nome já em uso' });\n        }\n\n        // Verifique se o email já está em uso\n        const existingUserEmail = await User.findOne({ where: { email } });\n        if (existingUserEmail) {\n            return res.status(400).json({ message: 'Email já em uso' });\n        }\n\n        // Verifique se o telefone já está em uso\n        const existingUserPhone = await User.findOne({ where: { phone } });\n        if (existingUserPhone) {\n            return res.status(400).json({ message: 'Número de telefone já em uso' });\n        }\n\n        // Aqui você pode adicionar a validação para o formato de email, se necessário\n\n        const hashedPassword = await bcrypt.hash(password, 10);\n        await User.create({ email, username, phone, password: hashedPassword });\n\n        return res.status(200).json({ message: 'Usuário cadastrado com sucesso' }); // Resposta JSON\n    } catch (error) {\n        console.error('Error:', error);\n        return res.status(500).json({ message: 'Cadastro inválido, verifique as informações' });\n    }\n}\n\n\n\n\nasync function loginUser(req, res) {\n    try {\n        const { email, password } = req.body;\n\n        const user = await User.findOne({ where: { email } });\n        if (!user) {\n            return res.status(401).json({ message: 'Email ou senha incorreto' });\n        }\n\n        const passwordMatch = await bcrypt.compare(password, user.password);\n        if (!passwordMatch) {\n            return res.status(401).json({ message: 'Email ou senha incorreto' });\n        }\n\n        const token = jwt.sign({ id: user.id, email: user.email, name: user.username }, 'seu_segredo', { expiresIn: '1h' });\n        console.log('ID do usuário recuperado:', user.id);\n\n        res.cookie('token', token, { httpOnly: true });\n\n        res.cookie('userId', user.id);\n        \n        res.status(200).json({ token, user });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n    }\n}\n\nasync function logoutUser(req, res) {\n    try {\n        res.clearCookie('token');\n        return res.redirect('/');\n    } catch (error) {\n        console.error('Erro:', error);\n        res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n}\n\nasync function updateUser(req, res) {\n    try {\n        const userId = req.user.id; // Obtém o ID do usuário autenticado\n        const { username, phone, password } = req.body; // Obtém os novos dados do usuário a serem atualizados\n\n        // Verifica a senha fornecida pelo usuário\n        const user = await User.findByPk(userId);\n        const passwordMatch = await bcrypt.compare(password, user.password);\n        if (!passwordMatch) {\n            return res.status(401).json({ message: 'Senha incorreta. As informações do usuário não foram atualizadas.' });\n        }\n\n        // Verifica se o novo username já está em uso por outro usuário\n        const existingUsername = await User.findOne({ where: { username } });\n        if (existingUsername && existingUsername.id !== req.user.id) {\n            return res.status(400).json({ message: 'Nome de usuário já em uso. Escolha outro.' });\n        }\n\n        // Verifica se o novo número de telefone já está em uso por outro usuário\n        const existingPhone = await User.findOne({ where: { phone } });\n        if (existingPhone && existingPhone.id !== req.user.id) {\n            return res.status(400).json({ message: 'Número de telefone já em uso. Escolha outro.' });\n        }\n        \n        // Atualiza as informações do usuário no banco de dados\n        user.username = username;\n        user.phone = phone;\n        await user.save();\n        \n        return res.status(200).json({ message: 'Informações do usuário atualizadas com sucesso!', user });\n    } catch (error) {\n        console.error('Erro ao atualizar informações do usuário:', error);\n        return res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n}\n\nmodule.exports = { registerUser, loginUser, logoutUser, updateUser };\n\n","// middleware/authMiddleware.js\n\nconst jwt = require('jsonwebtoken');\n\nfunction verificarTokenEObterDetalhesUsuario(req, res, next) {\n    const token = req.cookies.token; // Supondo que o token seja enviado como um cookie chamado 'token'\n\n    if (!token) {\n        console.log(\"Token de autenticação não fornecido\");\n        return res.redirect('/login');\n    }\n\n    try {\n        const decoded = jwt.verify(token, 'seu_segredo');\n        req.user = decoded;\n        next();\n    } catch (error) {\n        console.error('Erro ao verificar o token (Token inválido):', error);\n        return res.redirect('/login');\n    }\n}\n\n\nfunction authenticateJWT(req, res, next) {\n    // Verifique se o token está presente no cabeçalho Authorization\n    const authHeader = req.cookies.token;\n    if (!authHeader) {\n        return res.status(401).json({ message: 'Token de autenticação não fornecido' });\n    }\n\n    try {\n        // Verifique e decodifique o token usando a chave secreta\n        const decoded = jwt.verify(authHeader, 'seu_segredo');\n        req.user = decoded; // Adicione o payload do token decodificado ao objeto de solicitação (req.user)\n\n        // Verifique se o usuário é o usuário específico que você deseja autorizar\n        if (req.user.id !== 13) {\n            return res.status(403).json({ message: 'Você não tem permissão para acessar esta página' });\n        }\n\n        next(); // Prossiga para a próxima middleware ou rota\n    } catch (error) {\n        console.error('Erro ao verificar o token:', error);\n        return res.status(401).json({ message: 'Token inválido' });\n    }\n}\n\nfunction authenticateJWTImovelUser(req, res, next) {\n    // Verifique se o token está presente no cabeçalho Authorization\n    const authHeader = req.cookies.token;\n    if (!authHeader) {\n        return res.redirect('/login');\n    }\n\n    try {\n        // Verifique e decodifique o token usando a chave secreta\n        const decoded = jwt.verify(authHeader, 'seu_segredo');\n        req.user = decoded; // Adicione o payload do token decodificado ao objeto de solicitação (req.user)\n\n        // Verifique se o usuário é o usuário específico que você deseja autorizar\n        if (!req.user.id) {\n            return res.status(403).json({ message: 'Você não tem permissão para acessar esta página' });\n        }\n\n        next(); // Prossiga para a próxima middleware ou rota\n    } catch (error) {\n        console.error('Erro ao verificar o token:', error);\n        return res.redirect('/login');\n    }\n}\n\n\nmodule.exports = { authenticateJWT, verificarTokenEObterDetalhesUsuario,authenticateJWTImovelUser };","const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\nconst fs = require('fs');\nconst path = require('path');\n\nconst Imoveis = sequelize.define('Imoveis', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  titulo: {\n    type: DataTypes.STRING,\n    allowNull: true,\n  },\n  descricao: {\n    type: DataTypes.TEXT,\n    allowNull: true,\n  },\n  tipo: {\n    type: DataTypes.ENUM('aluguel', 'venda'),\n    allowNull: true,\n  },\n  quartos: {\n    type: DataTypes.INTEGER,\n    allowNull: true,\n  },\n  garagens: {\n    type: DataTypes.INTEGER,\n    allowNull: true,\n  },\n  suites: {\n    type: DataTypes.INTEGER,\n    allowNull: true,\n  },\n  preco: {\n    type: DataTypes.INTEGER,\n    allowNull: true,\n  },\n  cidade: {\n    type: DataTypes.STRING,\n    allowNull: true,\n  },\n  bairro: {\n    type: DataTypes.STRING,\n    allowNull: true,\n  },\n  rua: {\n    type: DataTypes.STRING,\n    allowNull: true,\n  },\n  tipoImovel: {\n    type: DataTypes.ENUM('apartamento', 'casa', 'terreno','sala-escritorio', 'loja', 'galpao', 'imovel-rural'),\n    allowNull: true,\n  },\n  areaUtil:{\n    type: DataTypes.INTEGER,\n    allowNull: true,\n  },\n  areaTotal:{\n    type: DataTypes.INTEGER,\n    allowNull: true,\n  },\n  status: {\n    type: DataTypes.STRING,\n    allowNull: true,\n  },\n  idUsuario:{\n    type: DataTypes.INTEGER,\n    allowNull: true,\n  },\n  fotos: {\n    type: DataTypes.JSON, // Alterado para armazenar os nomes dos arquivos das imagens\n    allowNull: true,\n  },\n  ordemFotos: {\n    type: DataTypes.JSON, // Mantido como está\n    allowNull: true,\n  }\n});\n\nImoveis.salvarImagens = async function(imovelId, fotos) {\n  const diretorioImoveis = path.join(__dirname, '../uploads'); // Substitua pelo caminho real onde deseja armazenar as imagens\n  const diretorioImovel = path.join(diretorioImoveis, imovelId.toString());\n\n  // Crie o diretório do imóvel se não existir\n  if (!fs.existsSync(diretorioImovel)) {\n    fs.mkdirSync(diretorioImovel);\n  }\n\n  // Salve cada imagem no diretório do imóvel\n  for (let foto of fotos) {\n    const nomeArquivo = foto.name;\n    const caminhoArquivo = path.join(diretorioImovel, nomeArquivo);\n    await fs.promises.writeFile(caminhoArquivo, foto.file); // Salva o arquivo no sistema de arquivos\n  }\n\n  // Atualize o modelo do imóvel no banco de dados para incluir os nomes dos arquivos das imagens\n  await Imoveis.update({ fotos: fotos.map(foto => foto.name) }, { where: { id: imovelId } });\n};\n\nmodule.exports = Imoveis;\n","// models/User.js\nconst { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\n\nconst User = sequelize.define('User', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  username: {\n    type: DataTypes.STRING,\n    allowNull: true,\n    unique: true,\n  },\n  email: {\n    type: DataTypes.STRING,\n    allowNull: true,\n    unique: true,\n    validate: {\n      isEmail: true,\n    },\n  },\n  phone:{\n    type: DataTypes.STRING,\n    allowNull: true,\n    unique: true,\n  },\n  password: {\n    type: DataTypes.STRING,\n    allowNull: true,\n  },\n});\n\nmodule.exports = User;\n","// passport.js\n\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\nconst JwtStrategy = require('passport-jwt').Strategy;\nconst ExtractJwt = require('passport-jwt').ExtractJwt;\nconst bcrypt = require('bcrypt');\nconst User = require('./models/User'); // Importe o modelo de usuário adequado\n\n// Configuração da estratégia local (username/password)\npassport.use(new LocalStrategy({\n    usernameField: 'email',\n    passwordField: 'password'\n}, async (email, password, done) => {\n    try {\n        const user = await User.findOne({ email });\n        if (!user) {\n            return done(null, false, { message: 'Incorrect email' });\n        }\n        const isPasswordMatch = await bcrypt.compare(password, user.password);\n        if (!isPasswordMatch) {\n            return done(null, false, { message: 'Incorrect password' });\n        }\n        return done(null, user);\n    } catch (error) {\n        return done(error);\n    }\n}));\n\nconst options = {\n    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    secretOrKey: 'seu_segredo', // Sua chave secreta para verificar o token\n  };\n  \n  passport.use(new JwtStrategy(options, async (payload, done) => {\n    try {\n      const user = await User.findById(payload.userId);\n      if (user) {\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    } catch (error) {\n      return done(error, false);\n    }\n  }));\n  \n  \n\nmodule.exports = passport;\n","// authRouter.js\nconst express = require('express');\nconst router = express.Router();\nconst authController = require('../controllers/authController');\nconst { authenticateJWT } = require('../middleware/authMiddleware');\n\nrouter.post('/cadastrar', authController.registerUser);\nrouter.post('/login', authController.loginUser);\n\nrouter.get('/usuario', authenticateJWT, (req, res) => {\n    res.json({ user: req.user });\n});\n\nrouter.put('/usuario', authenticateJWT, authController.updateUser);\n\n\nmodule.exports = router;\n\n","// routes/imoveis.js\n\nconst express = require('express');\nconst router = express.Router();\nconst ImovelController = require('../controllers/ImovelController');\nconst Imoveis = require('../models/Imovel');\nconst path = require('path');\nconst db = require('../config/database');\nconst sequelize = db.sequelize; // Acessando o objeto sequelize\n\n// Rota para lidar com o envio de dados do formulário e criar um novo imóvel\nrouter.post('/', async (req, res) => {\n    try {\n        const imovelData = req.body;\n        const novoImovel = await Imoveis.create(imovelData);\n        res.status(201).json(novoImovel);\n    } catch (error) {\n        console.error('Erro ao cadastrar imóvel:', error);\n        res.status(500).json({ error: 'Erro ao cadastrar imóvel' });\n    }\n});\n\nrouter.get('/buscar', async (req, res) => {\n    try {\n        // Extrair os parâmetros de busca da query da requisição\n        const { tipo, cidade, precoMinimo, precoMaximo, quartos, suites, garagens, tipoImovel } = req.query;\n\n        let whereClause = {};\n        if (tipo) whereClause.tipo = tipo;\n        if (cidade) whereClause.cidade = cidade;\n\n        const precoMinimoInt = parseInt(precoMinimo);\n        const precoMaximoInt = parseInt(precoMaximo);\n\n        if (!isNaN(precoMinimoInt) && !isNaN(precoMaximoInt)) {\n            // Construir a cláusula WHERE do filtro de preço\n            whereClause.preco = { [db.Sequelize.Op.between]: [precoMinimoInt, precoMaximoInt] };\n        } else if (!isNaN(precoMinimoInt)) {\n            whereClause.preco = { [db.Sequelize.Op.gte]: precoMinimoInt };\n        } else if (!isNaN(precoMaximoInt)) {\n            whereClause.preco = { [db.Sequelize.Op.lte]: precoMaximoInt };\n        }\n\n        const quartosInt = parseInt(quartos)\n        const suitesInt = parseInt(suites)\n        const garagensInt = parseInt(garagens)\n\n        if (quartosInt == 5) {\n            whereClause.quartos =  { [db.Sequelize.Op.gte]: quartosInt }\n        } else if(quartos) {whereClause.quartos = parseInt(quartos)}\n        if (suitesInt == 5) {\n            whereClause.quartos =  { [db.Sequelize.Op.gte]: suitesInt }\n        } else if(suites) {whereClause.suites = parseInt(suites)}\n        if (garagensInt == 5) {\n            whereClause.quartos =  { [db.Sequelize.Op.gte]: garagensInt }\n        } else if(garagens) {whereClause.suites = parseInt(garagens)}\n\n\n        if (tipoImovel) whereClause.tipoImovel = tipoImovel;\n\n        const imoveisFiltrados = await Imoveis.findAll({ where: whereClause });\n\n\n        console.log(typeof imoveisFiltrados); // Verifica o tipo de dados retornado\n\n        // Retornar os imóveis filtrados como resposta\n        res.status(200).json(imoveisFiltrados);\n    } catch (error) {\n        console.error('Erro ao buscar imóveis:', error);\n        res.status(500).json({ error: 'Erro ao buscar imóveis' });\n    }\n});\n\n\n\n\n// Rota para obter detalhes de um imóvel específico\nrouter.get('/:id', async (req, res) => {\n    try {\n        const imovel = await Imoveis.findByPk(req.params.id);\n        if (!imovel) {\n            return res.status(404).json({ message: 'Imóvel não encontrado' });\n        }\n\n        // Adiciona um log para verificar a estrutura de imovel.fotos\n        console.log('Estrutura de imovel.fotos:', imovel.fotos);\n\n        // Certifique-se de que imovel.fotos é um array\n        let imagensUrls = [];\n        if (Array.isArray(imovel.fotos)) {\n            imagensUrls = imovel.fotos.map(imagem => imagem.url);\n        } else {\n            console.warn('imovel.fotos não é um array:', imovel.fotos);\n        }\n\n        // Criar um objeto de resposta com os detalhes do imóvel e as URLs das imagens\n        const resposta = {\n            id: imovel.id,\n            titulo: imovel.titulo,\n            descricao: imovel.descricao,\n            tipo: imovel.tipo,\n            quartos: imovel.quartos,\n            suites: imovel.suites,\n            garagens: imovel.garagens,\n            preco: imovel.preco,\n            cidade: imovel.cidade,\n            bairro: imovel.bairro,\n            rua: imovel.rua,\n            tipoImovel: imovel.tipoImovel,\n            status: imovel.status,\n            fotos: imagensUrls\n        };\n\n        res.status(200).json(resposta);\n    } catch (error) {\n        console.error('Erro ao obter detalhes do imóvel:', error);\n        res.status(500).json({ error: 'Erro ao obter detalhes do imóvel' });\n    }\n});\n\n\nrouter.put('/:id', async (req, res) => {\n    try {\n        const imovel = await Imoveis.findByPk(req.params.id);\n        if (imovel) {\n            await imovel.update(req.body);\n            res.status(200).json(imovel);\n        } else {\n            res.status(404).json({ error: 'Imóvel não encontrado' });\n        }\n    } catch (error) {\n        console.error('Erro ao editar imóvel:', error);\n        res.status(500).json({ error: 'Erro ao editar imóvel' });\n    }\n});\n\n\n// Rotas adicionais para operações CRUD de imóveis utilizando ImovelController\nrouter.get('/', ImovelController.list); // Listar todos os imóveis\nrouter.put('/:id', ImovelController.update); // Atualizar um imóvel existente\nrouter.delete('/:id', ImovelController.delete); // Excluir um imóvel existente\n\nmodule.exports = router;\n","const express = require('express');\nconst router = express.Router();\nconst { User } = require('../models/User');\nconst Imovel = require('../models/Imovel'); // Importe o modelo do Imóvel\n\n// Rota para obter as informações do usuário com base no ID\nrouter.get('/api/usuario/:userId', async (req, res) => {\n      try {\n        // Recuperar o ID do usuário a partir dos parâmetros da URL\n        const userId = req.params.userId;\n\n        // Buscar as informações do usuário com base no ID\n        const user = await User.findByPk(userId);\n        if (!user) {\n            // Se o usuário não for encontrado, retornar um erro 404\n            return res.status(404).json({ message: 'Usuário não encontrado' });\n        }\n\n        // Retornar as informações do usuário como JSON\n        res.json({ nome: user.nome, email: user.email });\n    } catch (error) {\n        // Se ocorrer um erro, retornar um erro 500\n        console.error('Erro ao buscar informações do usuário:', error);\n        res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n});\n\nrouter.get('/api/imoveis/usuario/:userId', async (req, res) => {\n    try {\n        const userId = req.params.userId; \n        // Faça aqui a lógica para buscar os imóveis do usuário com o ID fornecido\n        // Por exemplo, você pode usar o modelo Imovel para encontrar os imóveis associados a esse usuário\n        const userImoveis = await Imovel.find({ idUsuario: userId });\n        res.json(userImoveis); \n    } catch (error) {\n        console.error('Erro ao buscar os imóveis do usuário:', error);\n        res.status(500).json({ error: 'Erro ao buscar os imóveis do usuário' }); \n    }\n});\n\n\nmodule.exports = router;\n","//index.js\nimport 'path-browserify';\nconst express = require('express');\nconst path = require('path');\nconst cors = require('cors');\nconst bcrypt = require('bcrypt');\n// const multer = require('multer');\nconst authRouter = require('./Back-End/back/routes/authRoutes'); // Importe as suas rotas de autenticação\nconst imoveisRouter = require('./Back-End/back/routes/imoveis');\nconst bodyParser = require('body-parser');\nconst authController = require('./Back-End/back/controllers/authController'); // Importe o controlador de autenticação\nconst User = require('./Back-End/back/models/User');\nconst passport = require('./Back-End/back/passport');\nconst { verificarTokenEObterDetalhesUsuario } = require('./Back-End/back/middleware/authMiddleware')\nconst usuarioRouter = require('./Back-End/back/routes/userRoutes')\nconst { authenticateJWT } = require('./Back-End/back/middleware/authMiddleware');\nconst { authenticateJWTImovelUser } = require('./Back-End/back/middleware/authMiddleware');\nconst imoveisImagemRouter = require('./Back-End/back/routes/imoveis'); // Importe o arquivo de rota de imagens de imóveis\nconst Imovel = require(\"./Back-End/back/models/Imovel\");\nconst cookieParser = require('cookie-parser');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000; // Define a porta do servidor\n\napp.use(passport.initialize());\napp.use(cookieParser());\n\napp.use(cors());\napp.use(express.static(path.join(__dirname, 'src')));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, 'src', 'pages'));\n\n// Rotas de autenticação\napp.use('/api/imoveis/imagens', imoveisImagemRouter);\napp.use('/api', usuarioRouter);\napp.use('/api/imoveis', imoveisRouter);\napp.use('/api/auth', authRouter); // Use o authRouter para lidar com rotas de autenticação\napp.post('/api/auth/login', authController.loginUser); // Rota para login de usuários\napp.post('/api/auth/register', authController.registerUser); // Rota para registro de usuários\napp.post('/api/auth/logout', authController.logoutUser); // Rota para logout de usuários\n\n\n// Rotas para servir páginas HTML\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, 'src', 'pages', 'index.html'));\n});\n\napp.get('/cadastroImovel',authenticateJWT, (req, res) => {\n  res.sendFile(path.join(__dirname, 'src', 'pages', 'cadastro.html'));\n});\n\napp.get('/cadastroImovelUser',authenticateJWTImovelUser, (req, res) => {\n  res.sendFile(path.join(__dirname, 'src', 'pages', 'cadastroImovelUser.html'));\n});\n\napp.get('/cadastro', (req, res) => {\n  res.sendFile(path.join(__dirname, 'src', 'pages', 'cadastroCliente.html'));\n});\n\n\napp.get('/login', (req, res) => {\n  res.sendFile(path.join(__dirname, 'src', 'pages', 'login.html'));\n});\n\napp.get('/logout', (req, res) => {\n  res.sendFile(path.join(__dirname, 'src', 'pages', 'logout.html'));\n});\n\napp.get('/resultado', (req, res) => {\n  res.sendFile(path.join(__dirname, 'src', 'pages', 'results.html'));\n});\n\napp.get('/detalhes', (req, res) => {\n  res.sendFile(path.join(__dirname, 'src', 'pages', 'detalhes.html'));\n});\n\napp.get('/analise',authenticateJWT, (req, res) => {\n  res.sendFile(path.join(__dirname, 'src', 'pages', 'analise.html'));\n});\n\napp.get('/seusImoveis', authenticateJWTImovelUser, (req, res) => {\n  res.sendFile(path.join(__dirname, 'src', 'pages', 'imoveisUser.html'));\n});\n\napp.get('/api/imoveis/usuario/:userId', async (req, res) => {\n  try {\n    const userId = req.params.userId; \n    const userImoveis = await Imovel.find({ idUsuario: userId });\n    res.json(userImoveis); \n  } catch (error) {\n    console.error('Erro ao buscar os imóveis do usuário:', error);\n    res.status(500).json({ error: 'Erro ao buscar os imóveis do usuário' }); \n  }\n});\n\napp.get('/api/user/id', authenticateJWT, (req, res) => {\n  const userId = req.user.id;\n  res.json({ userId });\n});\n\n// Rota protegida que requer autenticação\napp.get('/usuario', verificarTokenEObterDetalhesUsuario, (req, res) => {\n  res.render('usuario');\n});\n\napp.get('/api/usuario/:userId', async (req, res) => {\n  try {\n    // Recuperar o ID do usuário a partir dos parâmetros da URL\n    const userId = req.params.userId;\n\n    // Buscar as informações do usuário com base no ID\n    const user = await User.findByPk(userId);\n    if (!user) {\n      return res.status(404).json({ message: 'Usuário não encontrado' });\n    }\n\n    // Retornar as informações do usuário como JSON\n    res.json(user);\n  } catch (error) {\n    console.error('Erro ao buscar informações do usuário:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\napp.get('/editarImovel',authenticateJWT, (req, res) => {\n  res.sendFile(path.join(__dirname, 'src', 'pages', 'editaImovel.html'));\n});\n\n// Rota para obter os dados de um imóvel pelo ID\napp.get('/api/imoveis/:id', async (req, res) => {\n  try {\n      const imovelId = req.params.id;\n      const imovel = await Imovel.findByPk(imovelId);\n\n      if (!imovel) {\n          return res.status(404).json({ error: 'Imóvel não encontrado' });\n      }\n\n      // Converte as fotos para o formato esperado se necessário\n      if (imovel.fotos && !Array.isArray(imovel.fotos)) {\n          imovel.fotos = [imovel.fotos];\n      }\n\n      res.status(200).json(imovel);\n  } catch (error) {\n      console.error('Erro ao obter detalhes do imóvel:', error);\n      res.status(500).json({ error: 'Erro interno do servidor ao buscar detalhes do imóvel' });\n  }\n});\n\n\n\n\n\n// Rota para editar os dados de um imóvel\napp.put('/api/imoveis/:id', async (req, res) => {\n  const { id } = req.params;\n  const { titulo, descricao, tipo, tipoImovel, quartos, garagens, suites, preco, cidade, bairro, rua, status } = req.body;\n  try {\n      const imovel = await Imovel.findByPk(id); // Supondo que você tenha um modelo Imovel\n      if (!imovel) {\n          return res.status(404).json({ message: 'Imóvel não encontrado' });\n      }\n\n      imovel.titulo = titulo;\n      imovel.descricao = descricao;\n      imovel.tipo = tipo;\n      imovel.tipoImovel = tipoImovel;\n      imovel.quartos = quartos;\n      imovel.garagens = garagens;\n      imovel.suites = suites;\n      imovel.preco = preco;\n      imovel.cidade = cidade;\n      imovel.bairro = bairro;\n      imovel.rua = rua;\n      imovel.status = status;\n\n      await imovel.save();\n\n      res.status(200).json({ message: 'Imóvel atualizado com sucesso!', imovel });\n  } catch (error) {\n      console.error('Erro ao atualizar imóvel:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\napp.get('/editaUser', (req, res) => {\n  res.render('editaUser'); // Renderiza a página de edição de informações\n});\n\n// Rota para editar informações do usuário\napp.post('/api/editarUsuario', async (req, res) => {\n  try {\n    const userId = req.cookies.userId // Obtém o ID do usuário autenticado\n    const { username, phone, password } = req.body; // Obtém os novos dados do usuário a serem atualizados\n\n    // Verifica se o usuário existe no banco de dados\n    const user = await User.findByPk(userId);\n    if (!user) {\n      return res.status(404).json({ message: 'Usuário não encontrado' });\n    }\n\n    // Verifica se a senha fornecida pelo usuário está correta\n    const passwordMatch = await bcrypt.compare(password, user.password);\n    if (!passwordMatch) {\n      return res.status(401).json({ message: 'Senha incorreta. Não é possível atualizar as informações do usuário.' });\n    }\n\n    // Verifica se o novo nome de usuário já está em uso por outro usuário\n    const existingUsername = await User.findOne({ where: { username } });\n    if (existingUsername && existingUsername.id !== req.cookies.userId) {\n      return res.status(400).json({ message: 'Nome de usuário já em uso. Escolha outro.' });\n    }\n\n    // Verifica se o novo número de telefone já está em uso por outro usuário\n    const existingPhone = await User.findOne({ where: { phone } });\n    if (existingPhone && existingPhone.id !== req.cookies.userId) {\n      return res.status(400).json({ message: 'Número de telefone já em uso. Escolha outro.' });\n    }\n\n    // Atualiza as informações do usuário no banco de dados\n    user.username = username;\n    user.phone = phone;\n    await user.save();\n\n    // Retorna uma resposta de sucesso\n    return res.status(200).json({ message: 'Informações do usuário atualizadas com sucesso!', user });\n  } catch (error) {\n    console.error('Erro ao atualizar informações do usuário:', error);\n    return res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\napp.get('/editaSenha', (req, res) => {\n  res.render('editaSenha'); // Renderiza a página de edição de senha\n});\n\n// Rota para atualizar a senha do usuário\napp.post('/api/editarSenha', async (req, res) => {\n  try {\n    const userId = req.cookies.userId; // Obtém o ID do usuário autenticado\n    const { oldPassword, newPassword, confirmPassword } = req.body; // Obtém as senhas fornecidas\n\n    // Verifica se a nova senha e a confirmação são iguais\n    if (newPassword !== confirmPassword) {\n      return res.status(400).json({ message: 'A nova senha e a confirmação de senha não coincidem.' });\n    }\n\n    // Verifica se o usuário existe no banco de dados\n    const user = await User.findByPk(userId);\n    if (!user) {\n      return res.status(404).json({ message: 'Usuário não encontrado' });\n    }\n\n    // Verifica se a senha antiga fornecida pelo usuário está correta\n    const passwordMatch = await bcrypt.compare(oldPassword, user.password);\n    if (!passwordMatch) {\n      return res.status(401).json({ message: 'Senha antiga incorreta. Não é possível atualizar a senha.' });\n    }\n\n    // Criptografa a nova senha\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n\n    // Atualiza a senha do usuário no banco de dados\n    user.password = hashedPassword;\n    await user.save();\n\n    // Retorna uma resposta de sucesso\n    return res.status(200).json({ message: 'Senha atualizada com sucesso!' });\n  } catch (error) {\n    console.error('Erro ao atualizar a senha:', error);\n    return res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\nconst server = app.listen(PORT, () => {\n  console.log(`Servidor iniciado na porta ${PORT}`);\n});\n\nmodule.exports = { app, server };","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"cors\");","module.exports = require(\"express\");","module.exports = require(\"fs\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"passport\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"passport-local\");","module.exports = require(\"path-browserify\");","module.exports = require(\"sequelize\");"],"names":["Sequelize","require","sequelize","host","dialect","module","exports","Imovel","create","req","res","console","log","body","imovel","status","json","error","message","list","imoveis","findAll","getById","id","params","findByPk","update","updated","where","delete","deleted","destroy","end","bcrypt","jwt","User","registerUser","email","password","username","phone","existingUsername","findOne","existingUserEmail","existingUserPhone","hashedPassword","hash","loginUser","user","passwordMatch","compare","token","sign","name","expiresIn","cookie","httpOnly","logoutUser","clearCookie","redirect","updateUser","userId","existingPhone","save","verificarTokenEObterDetalhesUsuario","next","cookies","decoded","verify","authenticateJWT","authHeader","authenticateJWTImovelUser","DataTypes","fs","path","Imoveis","define","type","INTEGER","primaryKey","autoIncrement","titulo","STRING","allowNull","descricao","TEXT","tipo","ENUM","quartos","garagens","suites","preco","cidade","bairro","rua","tipoImovel","areaUtil","areaTotal","idUsuario","fotos","JSON","ordemFotos","salvarImagens","imovelId","diretorioImoveis","join","__dirname","diretorioImovel","toString","existsSync","mkdirSync","foto","nomeArquivo","caminhoArquivo","promises","writeFile","file","map","unique","validate","isEmail","passport","LocalStrategy","Strategy","JwtStrategy","ExtractJwt","use","usernameField","passwordField","done","isPasswordMatch","options","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","payload","findById","express","router","Router","authController","post","get","put","ImovelController","db","imovelData","novoImovel","precoMinimo","precoMaximo","query","whereClause","precoMinimoInt","parseInt","precoMaximoInt","isNaN","Op","between","gte","lte","quartosInt","suitesInt","garagensInt","imoveisFiltrados","imagensUrls","Array","isArray","imagem","url","warn","resposta","nome","userImoveis","find","cors","authRouter","imoveisRouter","bodyParser","usuarioRouter","imoveisImagemRouter","cookieParser","app","PORT","process","env","initialize","static","urlencoded","extended","set","sendFile","render","oldPassword","newPassword","confirmPassword","server","listen","concat"],"sourceRoot":""}